{"version":3,"sources":["containers/setting/SettingComponent.tsx","containers/setting/index.ts"],"names":["__WEBPACK_IMPORTED_MODULE_0_react__","__webpack_require__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1_react_redux__","__WEBPACK_IMPORTED_MODULE_2_react_router_dom__","__WEBPACK_IMPORTED_MODULE_3_react_router_redux__","__WEBPACK_IMPORTED_MODULE_4__material_ui_core_Paper__","__WEBPACK_IMPORTED_MODULE_5__material_ui_core_TextField__","__WEBPACK_IMPORTED_MODULE_6__material_ui_core_Button__","__WEBPACK_IMPORTED_MODULE_7__material_ui_core_styles__","__WEBPACK_IMPORTED_MODULE_8_src_config__","__WEBPACK_IMPORTED_MODULE_9_react_localize_redux__","__WEBPACK_IMPORTED_MODULE_10_src_store_actions_authorizeActions__","__WEBPACK_IMPORTED_MODULE_11__material_ui_core__","__webpack_exports__","Object","state","ownProps","translate","get","dispatch","login","password","homePage","theme","textField","minWidth","marginTop","paddingRight","contain","margin","paper","minHeight","maxWidth","textAlign","display","passwordChangeButton","width","marginRight","userNameChangeButton","[object Object]","props","super","this","handleInputChange","event","target","value","type","checked","name","setState","passwordInput","passwordInputError","confirmInputError","handleForm","error","confirmInput","bind","classes","a","createElement","container","spacing","item","xl","className","settings","appName","elevation","style","padding","paddingLeft","paddingTop","fontSize","fontWeight","lineHeight","autoFocus","onChange","helperText","label","trim","onClick","variant","color","defineProperty","__WEBPACK_IMPORTED_MODULE_0__SettingComponent__"],"mappings":"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","file":"static/js/2.6cc0defb.chunk.js","sourcesContent":["// - Import external components\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { NavLink, withRouter } from 'react-router-dom'\nimport { push } from 'react-router-redux'\nimport Paper from '@material-ui/core/Paper'\nimport TextField from '@material-ui/core/TextField'\nimport RaisedButton from '@material-ui/core/Button'\nimport Button from '@material-ui/core/Button'\nimport { withStyles } from '@material-ui/core/styles'\nimport config from 'src/config'\nimport { getTranslate, getActiveLanguage } from 'react-localize-redux'\n\n// - Import actions\nimport * as authorizeActions from 'src/store/actions/authorizeActions'\nimport { ISettingComponentProps } from './ISettingComponentProps'\nimport { ISettingComponentState } from './ISettingComponentState'\nimport { Grid } from '@material-ui/core'\n\nconst styles = (theme: any) => ({\n  textField: {\n    minWidth: 280,\n    marginTop: 20,\n    paddingRight: 150\n\n  },\n  contain: {\n    margin: '0 auto'\n  },\n  paper: {\n    minHeight: 370,\n    maxWidth: 1080,\n    // height: 150,\n    minWidth: 800,\n    textAlign: 'center',\n    display: 'block',\n    margin: 'auto'\n  },\n  passwordChangeButton: {\n    textAlign: 'center',\n    paddingRight: 0,\n    width: 200,\n    marginRight: 100\n  },\n  userNameChangeButton: {\n    textAlign: 'center',\n    paddingRight: 50,\n    width: 200,\n    marginRight: 250\n  }\n})\n/**\n * Create component class\n *\n * @export\n * @class SettingComponent\n * @extends {Component}\n */\nexport class SettingComponent extends Component<ISettingComponentProps,ISettingComponentState> {\n\n  /**\n   * Component constructor\n   * @param  {object} props is an object properties of component\n   */\n  constructor (props: ISettingComponentProps) {\n    super(props)\n\n    this.state = {\n      passwordInput: '',\n      passwordInputError: '',\n      confirmInput: '',\n      confirmInputError: ''\n\n    }\n    // Binding function to `this`\n    this.handleForm = this.handleForm.bind(this)\n\n  }\n\n  /**\n   * Handle data on input change\n   * @param  {event} evt is an event of inputs of element on change\n   */\n  handleInputChange = (event: any) => {\n    const target = event.target\n    const value = target.type === 'checkbox' ? target.checked : target.value\n    const name = target.name\n    this.setState({\n      passwordInput: value\n    })\n\n    switch (name) {\n      case 'passwordInput':\n        this.setState({\n          passwordInputError: ''\n        })\n        break\n      case 'confirmInput':\n        this.setState({\n          confirmInputError: '',\n          passwordInputError: ''\n        })\n\n        break\n      default:\n\n    }\n  }\n\n  /**\n   * Handle register form\n   */\n  handleForm = () => {\n    const {translate} = this.props\n    let error = false\n    if (this.state.passwordInput === '') {\n      this.setState({\n        passwordInputError: translate!('changePassword.newPasswordRequiredError')\n      })\n      error = true\n\n    } else if (this.state.confirmInput === '') {\n      this.setState({\n        confirmInputError: translate!('changePassword.confirmPasswordRequiredError')\n      })\n      error = true\n\n    } else if (this.state.confirmInput !== this.state.passwordInput) {\n      this.setState({\n        confirmInputError: translate!('changePassword.confirmPasswordEqualNewPasswordError')\n      })\n      error = true\n\n    }\n\n    if (!error) {\n      this.props.login!(\n        this.state.passwordInput,\n        this.state.confirmInput\n      )\n    }\n\n  }\n\n  /**\n   * Reneder component DOM\n   * @return {react element} return the DOM which rendered by component\n   */\n  render () {\n\n    const {classes, translate} = this.props\n\n    return (\n      <Grid container spacing={0}>\n        <Grid item xl={12} className={classes.contain}>\n\n        <h1 className='g__app-name'>{config.settings.appName}</h1>\n\n        <div className='animate-bottom'>\n          <Paper className={classes.paper} elevation={1} >\n            <div style={{ padding: '48px 40px 36px' }}>\n              <div style={{\n                paddingLeft: '40px',\n                paddingRight: '40px'\n              }}>\n\n                <h2 style={{\n                  textAlign: 'left',\n                  paddingTop: '10px',\n                  fontSize: '24px',\n                  fontWeight: 400,\n                  lineHeight: '32px',\n                  margin: 0\n                }} className='zoomOutLCorner animated g__paper-title'>{translate!('settings.title')}</h2>\n              </div>\n                <div>\n                  <h2 style={{\n                    textAlign: 'left',\n                    paddingLeft: '80px',\n                    paddingTop: '10px',\n                    fontSize: '15px',\n                    fontWeight: 400,\n                    lineHeight: '32px',\n                    margin: 0\n                  }}>{translate!('changePassword.title')}</h2>\n                </div>\n              <TextField\n              autoFocus\n              className={classes.textField}\n                onChange={this.handleInputChange}\n                helperText={this.state.passwordInputError}\n                name='passwordInput'\n                label={translate!('changePassword.newPasswordLabel')}\n                type='password'\n                error={this.state.passwordInputError.trim() !== ''}\n              /><br />\n              <TextField\n              className={classes.textField}\n                onChange={this.handleInputChange}\n                helperText={this.state.confirmInputError}\n                name='confirmInput'\n                label={translate!('changePassword.confirmPasswordLabel')}\n                type='password'\n                error={this.state.confirmInputError.trim() !== ''}\n              /><br />\n              <br />\n              <br />\n                <div className='settings__button-box'>\n                  <div>\n                    <Button onClick={this.props.homePage} > {translate!('changePassword.homeButton')} </Button>\n                  </div>\n                  <div className={classes.passwordChangeButton}>\n                  <Button variant='contained' color='primary' onClick={this.handleForm}> {translate!('changePassword.changePasswordButton')} </Button>\n                </div>\n              </div>\n              </div>\n          </Paper>\n        </div>\n        </Grid>\n        \n      </Grid>\n    )\n  }\n}\n\n/**\n * Map dispatch to props\n * @param  {func} dispatch is the function to dispatch action to reducers\n * @param  {object} ownProps is the props belong to component\n * @return {object}          props of component\n */\nconst mapDispatchToProps = (dispatch: any, ownProps: ISettingComponentProps) => {\n  return {\n    login: (password: string) => {\n      dispatch(authorizeActions.dbUpdatePassword(password))\n    },\n    homePage: () => {\n      dispatch(push('/'))\n    }\n  }\n}\n\n/**\n * Map state to props\n * @param  {object} state is the obeject from redux store\n * @param  {object} ownProps is the props belong to component\n * @return {object}          props of component\n */\nconst mapStateToProps = (state: any, ownProps: ISettingComponentProps) => {\n  return {\n    translate: getTranslate(state.get('locale'))\n  }\n}\n\n// - Connect component to redux store\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(withStyles(styles as any)(SettingComponent as any) as any) as any)\n\n\n\n// WEBPACK FOOTER //\n// ./src/containers/setting/SettingComponent.tsx","import SettingComponent from './SettingComponent'\nexport default SettingComponent\n\n\n\n// WEBPACK FOOTER //\n// ./src/containers/setting/index.ts"],"sourceRoot":""}